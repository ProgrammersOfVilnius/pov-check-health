pov-check-health
================

This is a "poor man's Nagios": a cron script that runs once an hour to
perform some basic system health checks.

Quick start::

    sudo add-apt-repository ppa:pov/ppa
    sudo apt-get update
    sudo apt-get install pov-check-health

The checks are configured in ``/etc/pov/check-health``, which is actually
a shell file that is sourced from the cron script.  If this file is missing,
``check-health`` does nothing.

You can generate a skeleton config file automatically with ::

    check-health > /etc/pov/check-health

Example configuration file::

    # Check that processes are running
    checkproc apache2
    checkproc cron
    checkproc sshd
    checkproc_pgrep tracd
    checkproc_pgrep_full '/usr/bin/java -jar /usr/share/jenkins/jenkins.war'

    # Check for stale aspell processes (more than 2)
    checktoomanyproc aspell 2

    # Check for stale pidfiles
    checkpidfiles /var/run/*.pid /var/run/*/*.pid

    # Check free disk space
    checkfs /    200M
    checkfs /var 200M

    # Check free inodes
    checkinodes /
    checkinodes /var

    # Check free memory
    checkram 100M

    # Check excessive swap usage
    checkswap 2G

    # Check mail queue
    checkmailq 100

    # Check if /etc/aliases is up to date
    checkaliases

The checks run with root privileges.  Any failures are reported via cron,
so make sure email delivery works and root is aliased to a working
email address via ``/etc/aliases``.

You can also run the checks manually by running ``check-health`` and see the
report on the console.  Run ``check-health -v`` for more verbosity.  Run
``check-health -f filename`` to use a different config file (useful to test it
before the cron script takes over).  Run ``check-health -h`` for a brief usage
notice::

    Usage: check-health [-h] [-v] [-f configfile] [-g]


Available checks
----------------

.. documentation generated by running ./extract-documentation.py

checkuptime [<uptime>[s/m/h/sec/min/hour]]
  Skip the rest of the checks if system uptime is less than N
  seconds/minutes/hours.

  <uptime> defaults to 10 minutes.


  Example: ``checkuptime 10m``


checkfs <mountpoint> [<amount>[K/M/G/T]]
  Check that the filesystem mounted on <mountpoint> has at least <amount>
  of metric kilo/mega/giga/terabytes free.

  <amount> defaults to 1M.


  Example: ``checkfs / 100M``


checkinodes <mountpoint> [<inodes>]
  Check that the filesystem mounted on <mountpoint> has at least <inodes>
  of free inodes left.

  <inodes> defaults to 5000.


  Example: ``checkinodes /``


checknfs <mountpoint>
  Check that an NFS file system is mounted on <mountpoint>.

  If not, try to mount all NFS filesystems.

  Used as a workaround for an Ubuntu issue where NFS filesystems would fail
  to mount during boot, but would mount fine afterwards.

  This hasn't been a problem lately.


  Example: ``checknfs /home``


checkpidfile <filename>
  Check that the process listed in a given pidfile is running.


  Example: ``checkpidfile /var/run/crond.pid``


checkpidfiles <filename> ...
  Check that the processes listed in given pidfiles are running.

  Suppresses warnings for /var/run/sm-notify.pid because it feels like a
  false positive.

  Suppresses warnings for failed glob expansion under /run or /var/run.


  Example: ``checkpidfiles /var/run/*.pid /var/run/*/*.pid``


checkproc <name>
  Check that a process with a given name is running.

  See also: checkproc_pgrep, checkproc_pgrep_full.


  Example: ``checkproc crond``


checkproc_pgrep <name>
  Check that a process with a given name is running.

  Uses pgrep instead of pidof.


  Example: ``checkproc_pgrep tracd``


checkproc_pgrep_full <cmdline>
  Check that a process matching a given command line is running.

  Uses pgrep -f instead of pidof, which makes it handle all sorts of things.


  Example: ``checkproc_pgrep_full scriptname.py``

  Example: ``checkproc_pgrep_full '/usr/bin/java -jar /usr/share/jenkins/jenkins.war'``


checktoomanyproc <name> <limit>
  Check that fewer than <limit> instances of a given process is running.

  See also: checktoomanyproc_pgrep, checktoomanyproc_pgrep_full.


  Example: ``checktoomanyproc aspell 2``


checktoomanyproc_pgrep <name> <limit>
  Check that fewer than <limit> instances of a given process is running.

  Uses pgrep instead of pidof.


  Example: ``checktoomanyproc_pgrep tracd 2``


checktoomanyproc_pgrep_full <limit> <cmdline>
  Check that fewer than <limit> instances of a given process is running.

  Uses pgrep -f instead of pidof, which makes it handle all sorts of things.


  Example: ``checktoomanyproc_pgrep_full 2 scriptname.py``

  Example: ``checktoomanyproc_pgrep_full 2 '/usr/bin/java -jar /usr/share/jenkins/jenkins.war'``


checkram [<free>[M/G/T]]
  Check that at least <free> metric mega/giga/terabytes of virtual memory are
  free.

  <free> defaults to 100 megabytes.


  Example: ``checkram 100M``


checkswap [<limit>[M/G/T]]
  Check if more than <limit> metric mega/giga/terabytes of swap are used.

  <limit> defaults to 100 megabytes.


  Example: ``checkswap 2G``


checkmailq [<limit>]
  Check if more than <limit> emails are waiting in the outgoing mail queue.

  <limit> defaults to 20.

  The check is silently skipped if you don't have any MTA (that provides a
  mailq command) installed.  Otherwise it probably works only with Postfix.


  Example: ``checkmailq 100``


checkzopemailq <path> ...
  Check if any messages older than one minute are present in the outgoing
  maildir used by zope.sendmail.

  <path> needs to refer to the 'new' subdirectory of the mail queue.


  Example: ``checkzopemailq /apps/zopes/*/var/mailqueue/new``


checkcups <queuename>
  Check if the printer is ready.

  Try to enable it if it became disabled.

  Background: I had this issue with CUPS randomly disabling a particular mail
  queue after it couldn't talk to the printer for a while due to network
  issues or something.  Manually reenabling the printer got old fast.
  This hasn't been a problem lately.


  Example: ``checkcups cheese``


cmpfiles <pathname1> <pathname2>
  Check if the two files are identical.

  Background: there were some init.d scripts that were writable by a non-root
  user.  I wanted to do manual inspection before replacing copies of them
  into /etc/init.d/.


  Example: ``cmpfiles /etc/init.d/someservice /home/someservice/initscript``


checkaliases
  Check if /etc/aliases.db is up to date.

  Probably works only with Postfix, and only if you use the default database
  format.

  Background: when you edit /etc/aliases it's so easy to forget to run
  newaliases.


  Example: ``checkaliases``


checklilo
  Check if LILO was run after a kernel update.

  Background: if you don't re-run LILO after you update your kernel, your
  machine will not boot.  We had to use LILO on one server because GRUB
  completely refused to boot from the Software RAID-1 root partition.


  Example: ``checklilo``

.. end of generated chunk


Additional tools
----------------

check-virtualenvs
~~~~~~~~~~~~~~~~~

Background: virtualenv is a solution for Python application sandboxing,
so that different applications can use different sets of Python libraries
without encountering conflicts due to incompatible versions.  It works
by creating directory trees that contain copies of the Python executable
in addition to symlinks to the Python standard library.  When you upgrade
the system Python executable, you end up with stale copies of the old
versions in all your virtualenvs.  Sometimes this simply means you don't
get the latest bugfixes.  Sometimes this breaks your virtualenvs
completely.

The ``check-virtualenvs`` script finds all virtualenvs on your system
and compares their copies of the Python executable with the system
version.  It relies on mlocate_ (or an equivalent such as slocate_)
for finding the virtualenvs.

.. _mlocate: http://packages.ubuntu.com/search?keywords=mlocate
.. _slocate: http://packages.ubuntu.com/search?keywords=slocate

It is not yet integrated with cron.
